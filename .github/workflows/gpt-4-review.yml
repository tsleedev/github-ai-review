name: AI Code Review with GPT-4

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR diff
        id: diff
        run: |
          # PR의 변경사항 가져오기
          git diff origin/${{ github.base_ref }}...HEAD > pr_diff.txt
          
          # 파일 크기 확인 (너무 큰 diff는 처리 제한)
          DIFF_SIZE=$(stat -c%s pr_diff.txt 2>/dev/null || stat -f%z pr_diff.txt)
          if [ "$DIFF_SIZE" -gt 100000 ]; then
            echo "PR diff is too large for review (>100KB)" > pr_diff.txt
          fi
          
      - name: AI Code Review with GPT-4
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          # GPT-4 API를 사용한 코드 리뷰
          PR_DIFF=$(cat pr_diff.txt | head -c 50000)  # 최대 50KB로 제한
          
          # API 요청 준비
          REQUEST_BODY=$(jq -n \
            --arg diff "$PR_DIFF" \
            '{
              "model": "gpt-4-turbo-preview",
              "messages": [{
                "role": "system",
                "content": "You are an expert code reviewer. Analyze code changes for bugs, performance issues, security vulnerabilities, and best practices. Provide actionable feedback with specific examples."
              }, {
                "role": "user",
                "content": "Review the following PR diff and provide detailed feedback on:\n1. Potential bugs or issues\n2. Performance concerns\n3. Security vulnerabilities\n4. Code quality and best practices\n5. Test coverage requirements\n\nPR Diff:\n\n\($diff)"
              }],
              "max_tokens": 4000,
              "temperature": 0.3
            }')
          
          # OpenAI API 호출
          REVIEW_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY")
          
          # HTTP 상태 코드 확인
          HTTP_STATUS=$(echo "$REVIEW_RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REVIEW_RESPONSE" | sed '/HTTP_STATUS/d')
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "API call failed (Status: $HTTP_STATUS)" > review_comment.txt
            echo "$RESPONSE_BODY" >> review_comment.txt
          else
            # 리뷰 결과 추출
            REVIEW_CONTENT=$(echo "$RESPONSE_BODY" | jq -r '.choices[0].message.content // "Unable to generate review"')
            echo "$REVIEW_CONTENT" > review_comment.txt
          fi
          
      - name: Post review comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('review_comment.txt', 'utf8');
            
            // PR에 코멘트 작성
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## 🤖 AI Code Review by GPT-4\n\n${reviewContent}\n\n---\n*Powered by OpenAI GPT-4*`
            });