# Python Project Code Review Template  
# Copy this file to .github/workflows/ai-code-review.yml in your repository

name: AI Code Review for Python

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - 'setup.py'
      - 'Pipfile*'

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR diff
        id: diff
        run: |
          git diff origin/${{ github.base_ref }}...HEAD > pr_diff.txt
          DIFF_SIZE=$(stat -c%s pr_diff.txt 2>/dev/null || stat -f%z pr_diff.txt)
          if [ "$DIFF_SIZE" -gt 100000 ]; then
            echo "PR diff is too large for review (>100KB)" > pr_diff.txt
          fi
          
      - name: AI Code Review - Python Focus
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          PR_DIFF=$(cat pr_diff.txt | head -c 50000)
          
          REQUEST_BODY=$(jq -n \
            --arg diff "$PR_DIFF" \
            '{
              "model": "claude-3-opus-20240229",
              "max_tokens": 4096,
              "messages": [{
                "role": "user",
                "content": "You are reviewing a Python project. Please analyze the following code changes with special attention to:\n\n1. **Python-specific issues:**\n   - Type hints and annotations\n   - PEP 8 compliance\n   - Pythonic idioms and best practices\n   - Exception handling\n   - Context managers usage\n\n2. **Performance concerns:**\n   - List comprehensions vs loops\n   - Generator usage\n   - Memory efficiency\n   - Algorithm complexity\n   - Database query optimization\n\n3. **Framework specifics (if applicable):**\n   - Django/Flask/FastAPI patterns\n   - ORM usage and queries\n   - Async/await implementation\n   - API design and RESTful practices\n\n4. **Security:**\n   - SQL injection prevention\n   - Input validation\n   - Authentication and authorization\n   - Secure password handling\n   - Environment variables and secrets\n\n5. **Testing and documentation:**\n   - Pytest/unittest coverage\n   - Docstring completeness\n   - Type checking (mypy)\n   - Edge case handling\n\nProvide specific Python code examples for improvements.\n\nPR Diff:\n\n\($diff)"
              }]
            }')
          
          REVIEW_RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" https://api.anthropic.com/v1/messages \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "content-type: application/json" \
            -d "$REQUEST_BODY")
          
          HTTP_STATUS=$(echo "$REVIEW_RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$REVIEW_RESPONSE" | sed '/HTTP_STATUS/d')
          
          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "API call failed (Status: $HTTP_STATUS)" > review_comment.txt
            echo "$RESPONSE_BODY" >> review_comment.txt
          else
            REVIEW_CONTENT=$(echo "$RESPONSE_BODY" | jq -r '.content[0].text // "Unable to generate review"')
            echo "$REVIEW_CONTENT" > review_comment.txt
          fi
          
      - name: Post review comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('review_comment.txt', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `## üêç AI Code Review for Python\n\n${reviewContent}\n\n---\n*Specialized review for Python best practices by Claude 3 Opus*`
            });